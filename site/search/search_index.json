{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Task Management API Documentation This is a simple Task Management API built using Flask. It allows users to create, retrieve, update, and delete tasks. Each task has a title, description, and completion status. API Endpoints 1. Create Tasks ( POST /tasks ) This endpoint allows users to create one or more tasks. The task data should be sent in JSON format. Request Body: { \"title\": \"Task Title\", \"description\": \"Task Description\" } Response: { \"message\": \"1 task(s) created successfully\", \"tasks\": [ { \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false } ] } 2. Get All Tasks ( GET /tasks ) This endpoint retrieves a list of all tasks. Response: [ { \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false }, { \"id\": 2, \"title\": \"Another Task\", \"description\": \"Another task description\", \"completed\": true } ] Additionally, the response includes the total number of tasks: { \"Total tasks\": 2 } 3. Get Task by ID ( GET /tasks/<task_id> ) This endpoint retrieves a single task by its ID. Response: { \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false } If the task is not found, the response will be: { \"error\": \"Task not found\" } 4. Update Task ( PUT /tasks/<task_id> ) This endpoint updates an existing task. The request body should include the updated task information. Request Body: { \"title\": \"Updated Task Title\", \"description\": \"Updated Task Description\", \"completed\": true } Response: { \"id\": 1, \"title\": \"Updated Task Title\", \"description\": \"Updated Task Description\", \"completed\": true } If the task is not found, the response will be: { \"error\": \"Task not found\" } 5. Delete Task ( DELETE /tasks/<task_id> ) This endpoint deletes a task by its ID. Response: { \"message\": \"Task deleted successfully\" } If the task is not found, the response will be: { \"error\": \"Task not found\" } Running the Application To run the application, ensure you have Python and Flask installed. Then, run the following command: python app.py The API will be available at http://127.0.0.1:5000/ . Conclusion This API provides basic task management functionality using simple HTTP methods. You can use it to manage tasks by interacting with the endpoints described above.","title":"Home"},{"location":"#task-management-api-documentation","text":"This is a simple Task Management API built using Flask. It allows users to create, retrieve, update, and delete tasks. Each task has a title, description, and completion status.","title":"Task Management API Documentation"},{"location":"#api-endpoints","text":"","title":"API Endpoints"},{"location":"#1-create-tasks-post-tasks","text":"This endpoint allows users to create one or more tasks. The task data should be sent in JSON format.","title":"1. Create Tasks (POST /tasks)"},{"location":"#request-body","text":"{ \"title\": \"Task Title\", \"description\": \"Task Description\" }","title":"Request Body:"},{"location":"#response","text":"{ \"message\": \"1 task(s) created successfully\", \"tasks\": [ { \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false } ] }","title":"Response:"},{"location":"#2-get-all-tasks-get-tasks","text":"This endpoint retrieves a list of all tasks.","title":"2. Get All Tasks (GET /tasks)"},{"location":"#response_1","text":"[ { \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false }, { \"id\": 2, \"title\": \"Another Task\", \"description\": \"Another task description\", \"completed\": true } ] Additionally, the response includes the total number of tasks: { \"Total tasks\": 2 }","title":"Response:"},{"location":"#3-get-task-by-id-get-taskstask_id","text":"This endpoint retrieves a single task by its ID.","title":"3. Get Task by ID (GET /tasks/&lt;task_id&gt;)"},{"location":"#response_2","text":"{ \"id\": 1, \"title\": \"Task Title\", \"description\": \"Task Description\", \"completed\": false } If the task is not found, the response will be: { \"error\": \"Task not found\" }","title":"Response:"},{"location":"#4-update-task-put-taskstask_id","text":"This endpoint updates an existing task. The request body should include the updated task information.","title":"4. Update Task (PUT /tasks/&lt;task_id&gt;)"},{"location":"#request-body_1","text":"{ \"title\": \"Updated Task Title\", \"description\": \"Updated Task Description\", \"completed\": true }","title":"Request Body:"},{"location":"#response_3","text":"{ \"id\": 1, \"title\": \"Updated Task Title\", \"description\": \"Updated Task Description\", \"completed\": true } If the task is not found, the response will be: { \"error\": \"Task not found\" }","title":"Response:"},{"location":"#5-delete-task-delete-taskstask_id","text":"This endpoint deletes a task by its ID.","title":"5. Delete Task (DELETE /tasks/&lt;task_id&gt;)"},{"location":"#response_4","text":"{ \"message\": \"Task deleted successfully\" } If the task is not found, the response will be: { \"error\": \"Task not found\" }","title":"Response:"},{"location":"#running-the-application","text":"To run the application, ensure you have Python and Flask installed. Then, run the following command: python app.py The API will be available at http://127.0.0.1:5000/ .","title":"Running the Application"},{"location":"#conclusion","text":"This API provides basic task management functionality using simple HTTP methods. You can use it to manage tasks by interacting with the endpoints described above.","title":"Conclusion"}]}